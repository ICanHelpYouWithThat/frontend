/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/progress-circle/progress-circle';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/debug_context';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/zone/ng_zone';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from './progress-circle.css.shim';
class MdProgressCircleModuleInjector extends import0.NgModuleInjector<import1.MdProgressCircleModule> {
  _MdProgressCircleModule_0:import1.MdProgressCircleModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdProgressCircleModule {
    this._MdProgressCircleModule_0 = new import1.MdProgressCircleModule();
    return this._MdProgressCircleModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdProgressCircleModule)) { return this._MdProgressCircleModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdProgressCircleModuleNgFactory:import0.NgModuleFactory<import1.MdProgressCircleModule> = new import0.NgModuleFactory(MdProgressCircleModuleInjector,import1.MdProgressCircleModule);
export class Wrapper_MdProgressCircle {
  /*private*/ _eventHandler:Function;
  context:import1.MdProgressCircle;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdProgressCircle(p0,p1,p2);
    this._expr_0 = import3.UNINITIALIZED;
    this._expr_1 = import3.UNINITIALIZED;
    this._expr_2 = import3.UNINITIALIZED;
    this._expr_3 = import3.UNINITIALIZED;
    this._expr_4 = import3.UNINITIALIZED;
    this._expr_5 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_0 = currValue;
    }
  }
  check_mode(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.mode = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_2:any = this.context._ariaValueMin;
    if (import5.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      view.renderer.setElementAttribute(el,'aria-valuemin',((currVal_2 == null)? (null as any): currVal_2.toString()));
      this._expr_2 = currVal_2;
    }
    const currVal_3:any = this.context._ariaValueMax;
    if (import5.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      view.renderer.setElementAttribute(el,'aria-valuemax',((currVal_3 == null)? (null as any): currVal_3.toString()));
      this._expr_3 = currVal_3;
    }
    const currVal_4:any = this.context.value;
    if (import5.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      view.renderer.setElementAttribute(el,'aria-valuenow',((currVal_4 == null)? (null as any): currVal_4.toString()));
      this._expr_4 = currVal_4;
    }
    const currVal_5:any = this.context.mode;
    if (import5.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementAttribute(el,'mode',((currVal_5 == null)? (null as any): currVal_5.toString()));
      this._expr_5 = currVal_5;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdSpinner {
  /*private*/ _eventHandler:Function;
  context:import1.MdSpinner;
  /*private*/ _changed:boolean;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdSpinner(p0,p1,p2);
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdProgressCircle_Host0:import6.StaticNodeDebugInfo[] = [new import6.StaticNodeDebugInfo([import1.MdProgressCircle],import1.MdProgressCircle,{})];
var renderType_MdProgressCircle_Host:import7.RenderComponentType = import5.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{});
class View_MdProgressCircle_Host0 extends import4.DebugAppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdProgressCircle>;
  _MdProgressCircle_0_3:Wrapper_MdProgressCircle;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressCircle_Host0,renderType_MdProgressCircle_Host,import9.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdProgressCircle_Host0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import5.selectOrCreateRenderHostElement(this.renderer,'md-progress-circle',new import5.InlineArray2(2,'role','progressbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdProgressCircle0(this.viewUtils,this,0,this._el_0);
    this._MdProgressCircle_0_3 = new Wrapper_MdProgressCircle(this.compView_0.ref,this.injectorGet(import11.NgZone,this.parentIndex),new import12.ElementRef(this._el_0));
    this.compView_0.create(this._MdProgressCircle_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdProgressCircle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdProgressCircle) && (0 === requestNodeIndex))) { return this._MdProgressCircle_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdProgressCircle_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this._MdProgressCircle_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdProgressCircle_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MdProgressCircleNgFactory:import10.ComponentFactory<import1.MdProgressCircle> = new import10.ComponentFactory<import1.MdProgressCircle>('md-progress-circle',View_MdProgressCircle_Host0,import1.MdProgressCircle);
const styles_MdProgressCircle:any[] = [import13.styles];
const nodeDebugInfos_MdProgressCircle0:import6.StaticNodeDebugInfo[] = [
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdProgressCircle:import7.RenderComponentType = import5.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/progress-circle/progress-circle.html',0,import8.ViewEncapsulation.Emulated,styles_MdProgressCircle,{});
export class View_MdProgressCircle0 extends import4.DebugAppView<import1.MdProgressCircle> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdProgressCircle0,renderType_MdProgressCircle,import9.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdProgressCircle0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',this.debug(0,4,3));
    this._el_1 = import5.createRenderElement(this.renderer,parentRenderNode,':svg:svg',new import5.InlineArray4(4,'preserveAspectRatio','xMidYMid meet','viewBox','0 0 100 100'),this.debug(1,5,0));
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',this.debug(2,6,41));
    this._el_3 = import5.createRenderElement(this.renderer,this._el_1,':svg:path',import5.EMPTY_INLINE_ARRAY,this.debug(3,7,2));
    this._text_4 = this.renderer.createText(this._el_1,'\n',this.debug(4,7,15));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',this.debug(5,8,6));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
}
const nodeDebugInfos_MdSpinner_Host0:import6.StaticNodeDebugInfo[] = [new import6.StaticNodeDebugInfo([import1.MdSpinner],import1.MdSpinner,{})];
var renderType_MdSpinner_Host:import7.RenderComponentType = import5.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{});
class View_MdSpinner_Host0 extends import4.DebugAppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdSpinner>;
  _MdSpinner_0_3:Wrapper_MdSpinner;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSpinner_Host0,renderType_MdSpinner_Host,import9.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdSpinner_Host0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import5.selectOrCreateRenderHostElement(this.renderer,'md-spinner',new import5.InlineArray4(4,'mode','indeterminate','role','progressbar'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdSpinner0(this.viewUtils,this,0,this._el_0);
    this._MdSpinner_0_3 = new Wrapper_MdSpinner(this.compView_0.ref,new import12.ElementRef(this._el_0),this.injectorGet(import11.NgZone,this.parentIndex));
    this.compView_0.create(this._MdSpinner_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdSpinner_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdSpinner) && (0 === requestNodeIndex))) { return this._MdSpinner_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdSpinner_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const MdSpinnerNgFactory:import10.ComponentFactory<import1.MdSpinner> = new import10.ComponentFactory<import1.MdSpinner>('md-spinner',View_MdSpinner_Host0,import1.MdSpinner);
const styles_MdSpinner:any[] = [import13.styles];
const nodeDebugInfos_MdSpinner0:import6.StaticNodeDebugInfo[] = [
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdSpinner:import7.RenderComponentType = import5.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/progress-circle/progress-circle.html',0,import8.ViewEncapsulation.Emulated,styles_MdSpinner,{});
export class View_MdSpinner0 extends import4.DebugAppView<import1.MdSpinner> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdSpinner0,renderType_MdSpinner,import9.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdSpinner0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n',this.debug(0,4,3));
    this._el_1 = import5.createRenderElement(this.renderer,parentRenderNode,':svg:svg',new import5.InlineArray4(4,'preserveAspectRatio','xMidYMid meet','viewBox','0 0 100 100'),this.debug(1,5,0));
    this._text_2 = this.renderer.createText(this._el_1,'\n  ',this.debug(2,6,41));
    this._el_3 = import5.createRenderElement(this.renderer,this._el_1,':svg:path',import5.EMPTY_INLINE_ARRAY,this.debug(3,7,2));
    this._text_4 = this.renderer.createText(this._el_1,'\n',this.debug(4,7,15));
    this._text_5 = this.renderer.createText(parentRenderNode,'\n',this.debug(5,8,6));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
}