/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/rtl/dir';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
class RtlModuleInjector extends import0.NgModuleInjector<import1.RtlModule> {
  _RtlModule_0:import1.RtlModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.RtlModule {
    this._RtlModule_0 = new import1.RtlModule();
    return this._RtlModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.RtlModule)) { return this._RtlModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const RtlModuleNgFactory:import0.NgModuleFactory<import1.RtlModule> = new import0.NgModuleFactory(RtlModuleInjector,import1.RtlModule);
export class Wrapper_Dir {
  /*private*/ _eventHandler:Function;
  context:import1.Dir;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.Dir();
    this._expr_0 = import3.UNINITIALIZED;
    this._expr_1 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check__dir(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context._dir = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_1:any = this.context.dir;
    if (import5.checkBinding(throwOnChange,this._expr_1,currVal_1)) {
      view.renderer.setElementAttribute(el,'dir',((currVal_1 == null)? (null as any): currVal_1.toString()));
      this._expr_1 = currVal_1;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.dirChange.subscribe(_eventHandler.bind(view,'dirChange'))); }
  }
}