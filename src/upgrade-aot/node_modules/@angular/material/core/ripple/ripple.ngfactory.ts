/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/core/ripple/ripple';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
class MdRippleModuleInjector extends import0.NgModuleInjector<import1.MdRippleModule> {
  _MdRippleModule_0:import1.MdRippleModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdRippleModule {
    this._MdRippleModule_0 = new import1.MdRippleModule();
    return this._MdRippleModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdRippleModule)) { return this._MdRippleModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdRippleModuleNgFactory:import0.NgModuleFactory<import1.MdRippleModule> = new import0.NgModuleFactory(MdRippleModuleInjector,import1.MdRippleModule);
export class Wrapper_MdRipple {
  /*private*/ _eventHandler:Function;
  context:import1.MdRipple;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  constructor(p0:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import1.MdRipple(p0);
    this._expr_0 = import3.UNINITIALIZED;
    this._expr_1 = import3.UNINITIALIZED;
    this._expr_2 = import3.UNINITIALIZED;
    this._expr_3 = import3.UNINITIALIZED;
    this._expr_4 = import3.UNINITIALIZED;
    this._expr_5 = import3.UNINITIALIZED;
    this._expr_6 = import3.UNINITIALIZED;
    this._expr_7 = import3.UNINITIALIZED;
    this._expr_8 = import3.UNINITIALIZED;
    this._expr_9 = import3.UNINITIALIZED;
    this._expr_10 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_trigger(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.trigger = currValue;
      this._changes['trigger'] = new import3.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_centered(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.centered = currValue;
      this._changes['centered'] = new import3.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._changes['disabled'] = new import3.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_maxRadius(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.maxRadius = currValue;
      this._changes['maxRadius'] = new import3.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_speedFactor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.speedFactor = currValue;
      this._changes['speedFactor'] = new import3.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._changes['color'] = new import3.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_backgroundColor(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.backgroundColor = currValue;
      this._changes['backgroundColor'] = new import3.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_focused(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.focused = currValue;
      this._changes['focused'] = new import3.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_unbounded(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.unbounded = currValue;
      this._changes['unbounded'] = new import3.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
    }
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_9:any = this.context.focused;
    if (import5.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      view.renderer.setElementClass(el,'md-ripple-focused',currVal_9);
      this._expr_9 = currVal_9;
    }
    const currVal_10:any = this.context.unbounded;
    if (import5.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      view.renderer.setElementClass(el,'md-ripple-unbounded',currVal_10);
      this._expr_10 = currVal_10;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}