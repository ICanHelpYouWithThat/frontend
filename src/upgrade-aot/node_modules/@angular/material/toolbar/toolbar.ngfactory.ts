/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/toolbar/toolbar';
import * as import2 from '@angular/core/src/di/injector';
import * as import3 from '@angular/core/src/change_detection/change_detection';
import * as import4 from '@angular/core/src/linker/view';
import * as import5 from '@angular/core/src/linker/view_utils';
import * as import6 from '@angular/core/src/linker/debug_context';
import * as import7 from '@angular/core/src/render/api';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/view_type';
import * as import10 from '@angular/core/src/linker/component_factory';
import * as import11 from '@angular/core/src/linker/element_ref';
import * as import12 from './toolbar.css';
class MdToolbarModuleInjector extends import0.NgModuleInjector<import1.MdToolbarModule> {
  _MdToolbarModule_0:import1.MdToolbarModule;
  constructor(parent:import2.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdToolbarModule {
    this._MdToolbarModule_0 = new import1.MdToolbarModule();
    return this._MdToolbarModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.MdToolbarModule)) { return this._MdToolbarModule_0; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdToolbarModuleNgFactory:import0.NgModuleFactory<import1.MdToolbarModule> = new import0.NgModuleFactory(MdToolbarModuleInjector,import1.MdToolbarModule);
export class Wrapper_MdToolbar {
  /*private*/ _eventHandler:Function;
  context:import1.MdToolbar;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any,p1:any) {
    this._changed = false;
    this.context = new import1.MdToolbar(p0,p1);
    this._expr_0 = import3.UNINITIALIZED;
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_color(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import5.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.color = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdToolbarRow {
  /*private*/ _eventHandler:Function;
  context:import1.MdToolbarRow;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.MdToolbarRow();
  }
  ngOnDetach(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import4.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import4.AppView<any>,componentView:import4.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import4.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdToolbar_Host0:import6.StaticNodeDebugInfo[] = [new import6.StaticNodeDebugInfo([import1.MdToolbar],import1.MdToolbar,{})];
var renderType_MdToolbar_Host:import7.RenderComponentType = import5.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{});
class View_MdToolbar_Host0 extends import4.DebugAppView<any> {
  _el_0:any;
  compView_0:import4.AppView<import1.MdToolbar>;
  _MdToolbar_0_3:Wrapper_MdToolbar;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdToolbar_Host0,renderType_MdToolbar_Host,import9.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdToolbar_Host0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    this._el_0 = import5.selectOrCreateRenderHostElement(this.renderer,'md-toolbar',import5.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdToolbar0(this.viewUtils,this,0,this._el_0);
    this._MdToolbar_0_3 = new Wrapper_MdToolbar(new import11.ElementRef(this._el_0),this.renderer);
    this.compView_0.create(this._MdToolbar_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import10.ComponentRef_<any>(0,this,this._el_0,this._MdToolbar_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbar) && (0 === requestNodeIndex))) { return this._MdToolbar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    if (this._MdToolbar_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) {  }
  }
}
export const MdToolbarNgFactory:import10.ComponentFactory<import1.MdToolbar> = new import10.ComponentFactory<import1.MdToolbar>('md-toolbar',View_MdToolbar_Host0,import1.MdToolbar);
const styles_MdToolbar:any[] = [import12.styles];
const nodeDebugInfos_MdToolbar0:import6.StaticNodeDebugInfo[] = [
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo([import1.MdToolbarRow],(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import6.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdToolbar:import7.RenderComponentType = import5.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/toolbar/toolbar.html',2,import8.ViewEncapsulation.None,styles_MdToolbar,{});
export class View_MdToolbar0 extends import4.DebugAppView<import1.MdToolbar> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _MdToolbarRow_2_3:Wrapper_MdToolbarRow;
  _text_3:any;
  _text_4:any;
  _text_5:any;
  _text_6:any;
  constructor(viewUtils:import5.ViewUtils,parentView:import4.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdToolbar0,renderType_MdToolbar,import9.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import3.ChangeDetectorStatus.CheckOnce,nodeDebugInfos_MdToolbar0);
  }
  createInternal(rootSelector:string):import10.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import5.createRenderElement(this.renderer,parentRenderNode,'div',new import5.InlineArray2(2,'class','md-toolbar-layout'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',this.debug(1,0,31));
    this._el_2 = import5.createRenderElement(this.renderer,this._el_0,'md-toolbar-row',import5.EMPTY_INLINE_ARRAY,this.debug(2,1,2));
    this._MdToolbarRow_2_3 = new Wrapper_MdToolbarRow();
    this._text_3 = this.renderer.createText(this._el_2,'\n    ',this.debug(3,1,18));
    this.debug((null as any),2,4);
    this.projectNodes(this._el_2,0);
    this._text_4 = this.renderer.createText(this._el_2,'\n  ',this.debug(4,2,29));
    this._text_5 = this.renderer.createText(this._el_0,'\n  ',this.debug(5,3,19));
    this.debug((null as any),4,2);
    this.projectNodes(this._el_0,1);
    this._text_6 = this.renderer.createText(this._el_0,'\n',this.debug(6,4,51));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4,
      this._text_5,
      this._text_6
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdToolbarRow) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 4)))) { return this._MdToolbarRow_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(2,1,2);
    this._MdToolbarRow_2_3.ngDoCheck(this,this._el_2,throwOnChange);
  }
}