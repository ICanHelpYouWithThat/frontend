/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/material/dialog/dialog-container';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/linker/debug_context';
import * as import5 from '@angular/core/src/render/api';
import * as import6 from '@angular/core/src/metadata/view';
import * as import7 from '@angular/core/src/linker/view_type';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/zone/ng_zone';
import * as import10 from './dialog-container.css';
import * as import11 from '@angular/material/core/a11y/focus-trap';
import * as import12 from '@angular/core/src/linker/template_ref';
import * as import13 from '@angular/material/core/portal/portal-directives';
import * as import14 from '@angular/core/src/linker/query_list';
import * as import15 from '../core/a11y/focus-trap.ngfactory';
import * as import16 from '@angular/core/src/linker/view_container';
import * as import17 from '../core/portal/portal-directives.ngfactory';
import * as import18 from '@angular/material/core/a11y/interactivity-checker';
import * as import19 from '@angular/core/src/linker/component_factory_resolver';
export class Wrapper_MdDialogContainer {
  /*private*/ _eventHandler:Function;
  context:import0.MdDialogContainer;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor(p0:any) {
    this._changed = false;
    this.context = new import0.MdDialogContainer(p0);
    this._expr_0 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_0:any = ((this.context.dialogConfig == null)? (null as any): this.context.dialogConfig.role);
    if (import3.checkBinding(throwOnChange,this._expr_0,currVal_0)) {
      view.renderer.setElementAttribute(el,'role',((currVal_0 == null)? (null as any): currVal_0.toString()));
      this._expr_0 = currVal_0;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'keydown.escape')) {
      const pd_sub_0:any = ((<any>this.context.handleEscapeKey()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdDialogContainer_Host0:import4.StaticNodeDebugInfo[] = [new import4.StaticNodeDebugInfo([import0.MdDialogContainer],import0.MdDialogContainer,{})];
var renderType_MdDialogContainer_Host:import5.RenderComponentType = import3.createRenderComponentType('',0,import6.ViewEncapsulation.None,([] as any[]),{});
class View_MdDialogContainer_Host0 extends import2.DebugAppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.MdDialogContainer>;
  _MdDialogContainer_0_3:Wrapper_MdDialogContainer;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdDialogContainer_Host0,renderType_MdDialogContainer_Host,import7.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdDialogContainer_Host0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'md-dialog-container',new import3.InlineArray2(2,'class','md-dialog-container'),rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdDialogContainer0(this.viewUtils,this,0,this._el_0);
    this._MdDialogContainer_0_3 = new Wrapper_MdDialogContainer(this.injectorGet(import9.NgZone,this.parentIndex));
    this.compView_0.create(this._MdDialogContainer_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'keydown.escape',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._MdDialogContainer_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.MdDialogContainer) && (0 === requestNodeIndex))) { return this._MdDialogContainer_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdDialogContainer_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdDialogContainer_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdDialogContainer_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._MdDialogContainer_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const MdDialogContainerNgFactory:import8.ComponentFactory<import0.MdDialogContainer> = new import8.ComponentFactory<import0.MdDialogContainer>('md-dialog-container',View_MdDialogContainer_Host0,import0.MdDialogContainer);
const styles_MdDialogContainer:any[] = [import10.styles];
const nodeDebugInfos_MdDialogContainer0:import4.StaticNodeDebugInfo[] = [
  new import4.StaticNodeDebugInfo([import11.FocusTrap],import11.FocusTrap,{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo([
    import12.TemplateRef,
    import13.PortalHostDirective
  ]
  ,(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import4.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdDialogContainer:import5.RenderComponentType = import3.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/dialog/dialog-container.html',0,import6.ViewEncapsulation.None,styles_MdDialogContainer,{});
export class View_MdDialogContainer0 extends import2.DebugAppView<import0.MdDialogContainer> {
  _viewQuery_PortalHostDirective_0:import14.QueryList<any>;
  _viewQuery_FocusTrap_1:import14.QueryList<any>;
  _el_0:any;
  compView_0:import2.AppView<import11.FocusTrap>;
  _FocusTrap_0_3:import15.Wrapper_FocusTrap;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import16.ViewContainer;
  _TemplateRef_2_5:any;
  _PortalHostDirective_2_6:import17.Wrapper_PortalHostDirective;
  _text_3:any;
  _text_4:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdDialogContainer0,renderType_MdDialogContainer,import7.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdDialogContainer0);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_PortalHostDirective_0 = new import14.QueryList<any>();
    this._viewQuery_FocusTrap_1 = new import14.QueryList<any>();
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'focus-trap',import3.EMPTY_INLINE_ARRAY,this.debug(0,0,0));
    this.compView_0 = new import15.View_FocusTrap0(this.viewUtils,this,0,this._el_0);
    this._FocusTrap_0_3 = new import15.Wrapper_FocusTrap(this.parentView.injectorGet(import18.InteractivityChecker,this.parentIndex));
    this._text_1 = this.renderer.createText((null as any),'\n  ',this.debug(1,0,12));
    this._anchor_2 = this.renderer.createTemplateAnchor((null as any),this.debug(2,1,2));
    this._vc_2 = new import16.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import12.TemplateRef_(this,2,this._anchor_2);
    this._PortalHostDirective_2_6 = new import17.Wrapper_PortalHostDirective(this.parentView.injectorGet(import19.ComponentFactoryResolver,this.parentIndex),this._vc_2.vcRef);
    this._text_3 = this.renderer.createText((null as any),'\n',this.debug(3,1,34));
    this.compView_0.create(this._FocusTrap_0_3.context);
    this._text_4 = this.renderer.createText(parentRenderNode,'\n',this.debug(4,2,13));
    this._viewQuery_PortalHostDirective_0.reset([this._PortalHostDirective_2_6.context]);
    this.context._portalHost = this._viewQuery_PortalHostDirective_0.first;
    this._viewQuery_FocusTrap_1.reset([this._FocusTrap_0_3.context]);
    this.context._focusTrap = this._viewQuery_FocusTrap_1.first;
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3,
      this._text_4
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import13.PortalHostDirective) && (2 === requestNodeIndex))) { return this._PortalHostDirective_2_6.context; }
    if (((token === import11.FocusTrap) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._FocusTrap_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._FocusTrap_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.debug(2,1,12);
    const currVal_2_0_0:any = '';
    this._PortalHostDirective_2_6.check_portal(currVal_2_0_0,throwOnChange,false);
    this._PortalHostDirective_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this.compView_0.destroy();
    this._PortalHostDirective_2_6.ngOnDestroy();
    this.debug(2,1,2);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {
      cb(this._text_1,ctx);
      cb(this._vc_2.nativeElement,ctx);
      this._vc_2.visitNestedViewRootNodes(cb,ctx);
      cb(this._text_3,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_MdDialogContainer1(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
}
const nodeDebugInfos_MdDialogContainer1:import4.StaticNodeDebugInfo[] = ([] as any[]);
class View_MdDialogContainer1 extends import2.DebugAppView<any> {
  _el_0:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import16.ViewContainer) {
    super(View_MdDialogContainer1,renderType_MdDialogContainer,import7.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import1.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdDialogContainer1,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = this.renderer.createTemplateAnchor((null as any),(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): ([] as any[])),(null as any));
    return (null as any);
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}