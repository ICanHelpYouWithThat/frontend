/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/button-toggle/button-toggle';
import * as import2 from '@angular/forms/src/directives';
import * as import3 from '@angular/forms/src/form_providers';
import * as import4 from '@angular/forms/src/directives/radio_control_value_accessor';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/change_detection/change_detection';
import * as import7 from '@angular/core/src/linker/view';
import * as import8 from '@angular/core/src/linker/view_utils';
import * as import9 from '@angular/core/src/linker/debug_context';
import * as import10 from '@angular/core/src/render/api';
import * as import11 from '@angular/core/src/metadata/view';
import * as import12 from '@angular/core/src/linker/view_type';
import * as import13 from '@angular/core/src/linker/component_factory';
import * as import14 from '@angular/material/core/coordination/unique-selection-dispatcher';
import * as import15 from './button-toggle.css';
class MdButtonToggleModuleInjector extends import0.NgModuleInjector<import1.MdButtonToggleModule> {
  _InternalFormsSharedModule_0:import2.InternalFormsSharedModule;
  _FormsModule_1:import3.FormsModule;
  _MdButtonToggleModule_2:import1.MdButtonToggleModule;
  __RadioControlRegistry_3:import4.RadioControlRegistry;
  constructor(parent:import5.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _RadioControlRegistry_3():import4.RadioControlRegistry {
    if ((this.__RadioControlRegistry_3 == null)) { (this.__RadioControlRegistry_3 = new import4.RadioControlRegistry()); }
    return this.__RadioControlRegistry_3;
  }
  createInternal():import1.MdButtonToggleModule {
    this._InternalFormsSharedModule_0 = new import2.InternalFormsSharedModule();
    this._FormsModule_1 = new import3.FormsModule();
    this._MdButtonToggleModule_2 = new import1.MdButtonToggleModule();
    return this._MdButtonToggleModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.InternalFormsSharedModule)) { return this._InternalFormsSharedModule_0; }
    if ((token === import3.FormsModule)) { return this._FormsModule_1; }
    if ((token === import1.MdButtonToggleModule)) { return this._MdButtonToggleModule_2; }
    if ((token === import4.RadioControlRegistry)) { return this._RadioControlRegistry_3; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdButtonToggleModuleNgFactory:import0.NgModuleFactory<import1.MdButtonToggleModule> = new import0.NgModuleFactory(MdButtonToggleModuleInjector,import1.MdButtonToggleModule);
export class Wrapper_MdButtonToggleGroup {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggleGroup;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  subscription0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdButtonToggleGroup();
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_0 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_1 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_2 = currValue;
    }
  }
  check_selected(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.selected = currValue;
      this._expr_3 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
export class Wrapper_MdButtonToggleGroupMultiple {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggleGroupMultiple;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  constructor() {
    this._changed = false;
    this.context = new import1.MdButtonToggleGroupMultiple();
    this._expr_0 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_0 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_MdButtonToggle {
  /*private*/ _eventHandler:Function;
  context:import1.MdButtonToggle;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  subscription0:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdButtonToggle(p0,p1,p2);
    this._expr_0 = import6.UNINITIALIZED;
    this._expr_1 = import6.UNINITIALIZED;
    this._expr_2 = import6.UNINITIALIZED;
    this._expr_3 = import6.UNINITIALIZED;
    this._expr_4 = import6.UNINITIALIZED;
    this._expr_5 = import6.UNINITIALIZED;
    this._expr_6 = import6.UNINITIALIZED;
    this._expr_7 = import6.UNINITIALIZED;
  }
  ngOnDetach(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_id(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.id = currValue;
      this._expr_0 = currValue;
    }
  }
  check_name(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.name = currValue;
      this._expr_1 = currValue;
    }
  }
  check_checked(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.checked = currValue;
      this._expr_2 = currValue;
    }
  }
  check_value(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.value = currValue;
      this._expr_3 = currValue;
    }
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import8.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._expr_4 = currValue;
    }
  }
  ngDoCheck(view:import7.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import7.AppView<any>,componentView:import7.AppView<any>,el:any,throwOnChange:boolean):void {
    const currVal_5:any = this.context.id;
    if (import8.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      view.renderer.setElementProperty(el,'id',currVal_5);
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = this.context.checked;
    if (import8.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      view.renderer.setElementClass(el,'md-button-toggle-checked',currVal_6);
      this._expr_6 = currVal_6;
    }
    const currVal_7:any = this.context.disabled;
    if (import8.checkBinding(throwOnChange,this._expr_7,currVal_7)) {
      view.renderer.setElementClass(el,'md-button-toggle-disabled',currVal_7);
      this._expr_7 = currVal_7;
    }
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import7.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.change.subscribe(_eventHandler.bind(view,'change'))); }
  }
}
const nodeDebugInfos_MdButtonToggle_Host0:import9.StaticNodeDebugInfo[] = [new import9.StaticNodeDebugInfo([import1.MdButtonToggle],import1.MdButtonToggle,{})];
var renderType_MdButtonToggle_Host:import10.RenderComponentType = import8.createRenderComponentType('',0,import11.ViewEncapsulation.None,([] as any[]),{});
class View_MdButtonToggle_Host0 extends import7.DebugAppView<any> {
  _el_0:any;
  compView_0:import7.AppView<import1.MdButtonToggle>;
  _MdButtonToggle_0_3:Wrapper_MdButtonToggle;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButtonToggle_Host0,renderType_MdButtonToggle_Host,import12.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButtonToggle_Host0);
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    this._el_0 = import8.selectOrCreateRenderHostElement(this.renderer,'md-button-toggle',import8.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdButtonToggle0(this.viewUtils,this,0,this._el_0);
    this._MdButtonToggle_0_3 = new Wrapper_MdButtonToggle(this.injectorGet(import1.MdButtonToggleGroup,this.parentIndex,(null as any)),this.injectorGet(import1.MdButtonToggleGroupMultiple,this.parentIndex,(null as any)),this.injectorGet(import14.MdUniqueSelectionDispatcher,this.parentIndex));
    this.compView_0.create(this._MdButtonToggle_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import13.ComponentRef_<any>(0,this,this._el_0,this._MdButtonToggle_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdButtonToggle) && (0 === requestNodeIndex))) { return this._MdButtonToggle_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdButtonToggle_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this._MdButtonToggle_0_3.checkHost(this,this.compView_0,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._MdButtonToggle_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdButtonToggleNgFactory:import13.ComponentFactory<import1.MdButtonToggle> = new import13.ComponentFactory<import1.MdButtonToggle>('md-button-toggle',View_MdButtonToggle_Host0,import1.MdButtonToggle);
const styles_MdButtonToggle:any[] = [import15.styles];
const nodeDebugInfos_MdButtonToggle0:import9.StaticNodeDebugInfo[] = [
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{input: (null as any)}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import9.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdButtonToggle:import10.RenderComponentType = import8.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/button-toggle/button-toggle.html',1,import11.ViewEncapsulation.None,styles_MdButtonToggle,{});
export class View_MdButtonToggle0 extends import7.DebugAppView<import1.MdButtonToggle> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _text_6:any;
  _text_7:any;
  _text_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  constructor(viewUtils:import8.ViewUtils,parentView:import7.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdButtonToggle0,renderType_MdButtonToggle,import12.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdButtonToggle0);
    this._expr_9 = import6.UNINITIALIZED;
    this._expr_10 = import6.UNINITIALIZED;
    this._expr_11 = import6.UNINITIALIZED;
    this._expr_12 = import6.UNINITIALIZED;
    this._expr_13 = import6.UNINITIALIZED;
    this._expr_14 = import6.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import13.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import8.createRenderElement(this.renderer,parentRenderNode,'label',new import8.InlineArray2(2,'class','md-button-toggle-label'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',this.debug(1,0,59));
    this._el_2 = import8.createRenderElement(this.renderer,this._el_0,'input',new import8.InlineArray2(2,'class','md-button-toggle-input md-visually-hidden'),this.debug(2,1,2));
    this._text_3 = this.renderer.createText(this._el_0,'\n\n  ',this.debug(3,8,41));
    this._el_4 = import8.createRenderElement(this.renderer,this._el_0,'div',new import8.InlineArray2(2,'class','md-button-toggle-label-content'),this.debug(4,10,2));
    this._text_5 = this.renderer.createText(this._el_4,'\n    ',this.debug(5,10,46));
    this.debug((null as any),11,4);
    this.projectNodes(this._el_4,0);
    this._text_6 = this.renderer.createText(this._el_4,'\n  ',this.debug(6,11,29));
    this._text_7 = this.renderer.createText(this._el_0,'\n',this.debug(7,12,8));
    this._text_8 = this.renderer.createText(parentRenderNode,'\n',this.debug(8,13,8));
    var disposable_0:Function = import8.subscribeToRenderElement(this,this._el_2,new import8.InlineArray4(4,'change',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_2));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._text_7,
      this._text_8
    ]
    ),[disposable_0]);
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,7);
    const currVal_9:any = this.context.inputId;
    if (import8.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementAttribute(this._el_0,'for',((currVal_9 == null)? (null as any): currVal_9.toString()));
      this._expr_9 = currVal_9;
    }
    this.debug(2,2,9);
    const currVal_10:any = this.context._type;
    if (import8.checkBinding(throwOnChange,this._expr_10,currVal_10)) {
      this.renderer.setElementProperty(this._el_2,'type',currVal_10);
      this._expr_10 = currVal_10;
    }
    this.debug(2,3,9);
    const currVal_11:any = this.context.inputId;
    if (import8.checkBinding(throwOnChange,this._expr_11,currVal_11)) {
      this.renderer.setElementProperty(this._el_2,'id',currVal_11);
      this._expr_11 = currVal_11;
    }
    this.debug(2,4,9);
    const currVal_12:any = this.context.checked;
    if (import8.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementProperty(this._el_2,'checked',currVal_12);
      this._expr_12 = currVal_12;
    }
    this.debug(2,5,9);
    const currVal_13:any = this.context.disabled;
    if (import8.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementProperty(this._el_2,'disabled',currVal_13);
      this._expr_13 = currVal_13;
    }
    this.debug(2,6,9);
    const currVal_14:any = this.context.name;
    if (import8.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementProperty(this._el_2,'name',currVal_14);
      this._expr_14 = currVal_14;
    }
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.debug(2,1,2);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'change')) {
      const pd_sub_0:any = ((<any>this.context._onInputChange($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'click')) {
      const pd_sub_1:any = ((<any>this.context._onInputClick($event)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
}