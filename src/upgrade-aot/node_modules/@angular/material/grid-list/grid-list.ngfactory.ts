/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/grid-list/grid-list';
import * as import2 from '@angular/material/core/line/line';
import * as import3 from '@angular/core/src/di/injector';
import * as import4 from '@angular/core/src/change_detection/change_detection';
import * as import5 from '@angular/core/src/linker/view';
import * as import6 from '@angular/core/src/linker/view_utils';
import * as import7 from '@angular/core/src/linker/debug_context';
import * as import8 from '@angular/core/src/render/api';
import * as import9 from '@angular/core/src/metadata/view';
import * as import10 from '@angular/core/src/linker/query_list';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from '@angular/core/src/linker/element_ref';
import * as import14 from '@angular/material/core/rtl/dir';
import * as import15 from './grid-list.css';
class MdGridListModuleInjector extends import0.NgModuleInjector<import1.MdGridListModule> {
  _MdLineModule_0:import2.MdLineModule;
  _MdGridListModule_1:import1.MdGridListModule;
  constructor(parent:import3.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  createInternal():import1.MdGridListModule {
    this._MdLineModule_0 = new import2.MdLineModule();
    this._MdGridListModule_1 = new import1.MdGridListModule();
    return this._MdGridListModule_1;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.MdLineModule)) { return this._MdLineModule_0; }
    if ((token === import1.MdGridListModule)) { return this._MdGridListModule_1; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdGridListModuleNgFactory:import0.NgModuleFactory<import1.MdGridListModule> = new import0.NgModuleFactory(MdGridListModuleInjector,import1.MdGridListModule);
export class Wrapper_MdGridList {
  /*private*/ _eventHandler:Function;
  context:import1.MdGridList;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  constructor(p0:any,p1:any,p2:any) {
    this._changed = false;
    this.context = new import1.MdGridList(p0,p1,p2);
    this._expr_0 = import4.UNINITIALIZED;
    this._expr_1 = import4.UNINITIALIZED;
    this._expr_2 = import4.UNINITIALIZED;
  }
  ngOnDetach(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  check_cols(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.cols = currValue;
      this._expr_0 = currValue;
    }
  }
  check_gutterSize(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.gutterSize = currValue;
      this._expr_1 = currValue;
    }
  }
  check_rowHeight(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import6.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.rowHeight = currValue;
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import5.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import5.AppView<any>,componentView:import5.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import5.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_MdGridList_Host0:import7.StaticNodeDebugInfo[] = [new import7.StaticNodeDebugInfo([import1.MdGridList],import1.MdGridList,{})];
var renderType_MdGridList_Host:import8.RenderComponentType = import6.createRenderComponentType('',0,import9.ViewEncapsulation.None,([] as any[]),{});
class View_MdGridList_Host0 extends import5.DebugAppView<any> {
  _el_0:any;
  compView_0:import5.AppView<import1.MdGridList>;
  _MdGridList_0_3:Wrapper_MdGridList;
  _query_MdGridTile_0_0:import10.QueryList<any>;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdGridList_Host0,renderType_MdGridList_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import4.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdGridList_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import6.selectOrCreateRenderHostElement(this.renderer,'md-grid-list',import6.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_MdGridList0(this.viewUtils,this,0,this._el_0);
    this._MdGridList_0_3 = new Wrapper_MdGridList(this.renderer,new import13.ElementRef(this._el_0),this.injectorGet(import14.Dir,this.parentIndex,(null as any)));
    this._query_MdGridTile_0_0 = new import10.QueryList<any>();
    this.compView_0.create(this._MdGridList_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._MdGridList_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.MdGridList) && (0 === requestNodeIndex))) { return this._MdGridList_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._MdGridList_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    if (!throwOnChange) {
      if (this._query_MdGridTile_0_0.dirty) {
        this._query_MdGridTile_0_0.reset(([] as any[]));
        this._MdGridList_0_3.context._tiles = this._query_MdGridTile_0_0;
        this._query_MdGridTile_0_0.notifyOnChanges();
      }
      this.debug(0,0,0);
      this._MdGridList_0_3.context.ngAfterContentChecked();
    }
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {  }
  }
}
export const MdGridListNgFactory:import12.ComponentFactory<import1.MdGridList> = new import12.ComponentFactory<import1.MdGridList>('md-grid-list',View_MdGridList_Host0,import1.MdGridList);
const styles_MdGridList:any[] = [import15.styles];
const nodeDebugInfos_MdGridList0:import7.StaticNodeDebugInfo[] = [
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import7.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_MdGridList:import8.RenderComponentType = import6.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/grid-list/grid-list.html',1,import9.ViewEncapsulation.None,styles_MdGridList,{});
export class View_MdGridList0 extends import5.DebugAppView<import1.MdGridList> {
  _el_0:any;
  _text_1:any;
  _text_2:any;
  constructor(viewUtils:import6.ViewUtils,parentView:import5.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_MdGridList0,renderType_MdGridList,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import4.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_MdGridList0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import6.createRenderElement(this.renderer,parentRenderNode,'div',new import6.InlineArray2(2,'class','md-grid-list'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',this.debug(1,0,26));
    this.debug((null as any),1,2);
    this.projectNodes(this._el_0,0);
    this._text_2 = this.renderer.createText(this._el_0,'\n',this.debug(2,1,27));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
}