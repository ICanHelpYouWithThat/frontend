/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/linker/ng_module_factory';
import * as import1 from '@angular/material/tooltip/tooltip';
import * as import2 from '@angular/material/core/portal/portal-directives';
import * as import3 from '@angular/material/core/overlay/overlay-directives';
import * as import4 from '@angular/core/src/di/injector';
import * as import5 from '@angular/core/src/change_detection/change_detection';
import * as import6 from '@angular/core/src/linker/view';
import * as import7 from '@angular/core/src/linker/view_utils';
import * as import8 from '@angular/core/src/linker/debug_context';
import * as import9 from '@angular/core/src/render/api';
import * as import10 from '@angular/core/src/metadata/view';
import * as import11 from '@angular/core/src/linker/view_type';
import * as import12 from '@angular/core/src/linker/component_factory';
import * as import13 from './tooltip.css.shim';
import * as import14 from '@angular/core/src/animation/animation_transition';
import * as import15 from '@angular/core/src/animation/animation_sequence_player';
import * as import16 from '@angular/core/src/animation/animation_styles';
import * as import17 from '@angular/core/src/animation/animation_style_util';
import * as import18 from '@angular/core/src/animation/animation_keyframe';
import * as import19 from '@angular/core/src/animation/animation_player';
import * as import20 from '@angular/core/src/security';
class MdTooltipModuleInjector extends import0.NgModuleInjector<import1.MdTooltipModule> {
  _PortalModule_0:import2.PortalModule;
  _OverlayModule_1:import3.OverlayModule;
  _MdTooltipModule_2:import1.MdTooltipModule;
  constructor(parent:import4.Injector) {
    super(parent,[TooltipComponentNgFactory],([] as any[]));
  }
  createInternal():import1.MdTooltipModule {
    this._PortalModule_0 = new import2.PortalModule();
    this._OverlayModule_1 = new import3.OverlayModule();
    this._MdTooltipModule_2 = new import1.MdTooltipModule();
    return this._MdTooltipModule_2;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import2.PortalModule)) { return this._PortalModule_0; }
    if ((token === import3.OverlayModule)) { return this._OverlayModule_1; }
    if ((token === import1.MdTooltipModule)) { return this._MdTooltipModule_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const MdTooltipModuleNgFactory:import0.NgModuleFactory<import1.MdTooltipModule> = new import0.NgModuleFactory(MdTooltipModuleInjector,import1.MdTooltipModule);
export class Wrapper_MdTooltip {
  /*private*/ _eventHandler:Function;
  context:import1.MdTooltip;
  /*private*/ _changed:boolean;
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this.context = new import1.MdTooltip(p0,p1,p2,p3);
    this._expr_0 = import5.UNINITIALIZED;
    this._expr_1 = import5.UNINITIALIZED;
  }
  ngOnDetach(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
  }
  check_position(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import7.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.position = currValue;
      this._expr_0 = currValue;
    }
  }
  check_message(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import7.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.message = currValue;
      this._expr_1 = currValue;
    }
  }
  ngDoCheck(view:import6.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mouseenter')) {
      const pd_sub_0:any = ((<any>this.context.show()) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_1:any = ((<any>this.context.hide()) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  subscribe(view:import6.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
export class Wrapper_TooltipComponent {
  /*private*/ _eventHandler:Function;
  context:import1.TooltipComponent;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import1.TooltipComponent();
  }
  ngOnDetach(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import6.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import6.AppView<any>,componentView:import6.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'body:click')) {
      const pd_sub_0:any = ((<any>this.context._handleBodyInteraction()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import6.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
const nodeDebugInfos_TooltipComponent_Host0:import8.StaticNodeDebugInfo[] = [new import8.StaticNodeDebugInfo([import1.TooltipComponent],import1.TooltipComponent,{})];
var renderType_TooltipComponent_Host:import9.RenderComponentType = import7.createRenderComponentType('',0,import10.ViewEncapsulation.None,([] as any[]),{});
class View_TooltipComponent_Host0 extends import6.DebugAppView<any> {
  _el_0:any;
  compView_0:import6.AppView<import1.TooltipComponent>;
  _TooltipComponent_0_3:Wrapper_TooltipComponent;
  constructor(viewUtils:import7.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TooltipComponent_Host0,renderType_TooltipComponent_Host,import11.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import5.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TooltipComponent_Host0);
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    this._el_0 = import7.selectOrCreateRenderHostElement(this.renderer,'md-tooltip-component',import7.EMPTY_INLINE_ARRAY,rootSelector,this.debug(0,0,0));
    this.compView_0 = new View_TooltipComponent0(this.viewUtils,this,0,this._el_0);
    this._TooltipComponent_0_3 = new Wrapper_TooltipComponent();
    this.compView_0.create(this._TooltipComponent_0_3.context);
    var disposable_0:Function = import7.subscribeToRenderElement(this,this._el_0,new import7.InlineArray2(2,'click','body'),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import12.ComponentRef_<any>(0,this,this._el_0,this._TooltipComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import1.TooltipComponent) && (0 === requestNodeIndex))) { return this._TooltipComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this.debug(0,0,0);
    this._TooltipComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.detectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._TooltipComponent_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const TooltipComponentNgFactory:import12.ComponentFactory<import1.TooltipComponent> = new import12.ComponentFactory<import1.TooltipComponent>('md-tooltip-component',View_TooltipComponent_Host0,import1.TooltipComponent);
const styles_TooltipComponent:any[] = [import13.styles];
var TooltipComponent_state_states:any = {
  void: {transform: 'scale(0)'},
  visible: {transform: 'scale(1)'},
  hidden: {transform: 'scale(0)'},
  '*': {}
}
;
function TooltipComponent_state_factory(view:import6.AppView<any>,element:any,currentState:any,nextState:any):import14.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,'state',(nextState == 'void'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = TooltipComponent_state_states['*'];
  var startStateStyles:any = TooltipComponent_state_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = TooltipComponent_state_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && (true && (nextState == 'visible')))) {
      player = new import15.AnimationSequencePlayer([view.renderer.animate(element,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[startStateStyles])),import17.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import18.AnimationKeyframe(0,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[{}]))),
        new import18.AnimationKeyframe(1,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),150,0,'cubic-bezier(0.0, 0.0, 0.2, 1)',previousPlayers)]);
    totalTime = 150;
  }
  if (((player == (null as any)) && (true && (nextState == 'hidden')))) {
      player = new import15.AnimationSequencePlayer([view.renderer.animate(element,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[startStateStyles])),import17.balanceAnimationKeyframes(collectedStyles,endStateStyles,[
        new import18.AnimationKeyframe(0,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[{}]))),
        new import18.AnimationKeyframe(1,new import16.AnimationStyles(import17.collectAndResolveStyles(collectedStyles,[{}])))
      ]
    ),150,0,'cubic-bezier(0.4, 0.0, 1, 1)',previousPlayers)]);
    totalTime = 150;
  }
  if ((player == (null as any))) { (player = new import19.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import17.renderStyles(element,view.renderer,import17.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import15.AnimationSequencePlayer(previousPlayers).destroy();
  import17.renderStyles(element,view.renderer,import17.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'state',player);
  return new import14.AnimationTransition(player,currentState,nextState,totalTime);
}
const nodeDebugInfos_TooltipComponent0:import8.StaticNodeDebugInfo[] = [
  new import8.StaticNodeDebugInfo(([] as any[]),(null as any),{}),
  new import8.StaticNodeDebugInfo(([] as any[]),(null as any),{})
]
;
var renderType_TooltipComponent:import9.RenderComponentType = import7.createRenderComponentType('/Users/jessebowden/ichuwt/frontend/node_modules/@angular/material/tooltip/tooltip.html',0,import10.ViewEncapsulation.Emulated,styles_TooltipComponent,{state: TooltipComponent_state_factory});
export class View_TooltipComponent0 extends import6.DebugAppView<import1.TooltipComponent> {
  _el_0:any;
  _text_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  constructor(viewUtils:import7.ViewUtils,parentView:import6.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_TooltipComponent0,renderType_TooltipComponent,import11.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import5.ChangeDetectorStatus.CheckAlways,nodeDebugInfos_TooltipComponent0);
    this._expr_2 = import5.UNINITIALIZED;
    this._expr_3 = import5.UNINITIALIZED;
    this._expr_4 = import5.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import12.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import7.createRenderElement(this.renderer,parentRenderNode,'div',new import7.InlineArray2(2,'class','md-tooltip'),this.debug(0,0,0));
    this._text_1 = this.renderer.createText(this._el_0,'',this.debug(1,3,60));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3:any = this.context._visibility;
    if (import7.checkBinding(throwOnChange,this._expr_3,currVal_3)) {
      var animationTransition_state:any = this.componentType.animations['state'](this,this._el_0,((this._expr_3 == import5.UNINITIALIZED)? 'void': this._expr_3),((currVal_3 == import5.UNINITIALIZED)? 'void': currVal_3));
      animationTransition_state.onStart(this.handleEvent_0.bind(this).bind(this,'@state.start'));
      animationTransition_state.onDone(this.handleEvent_0.bind(this).bind(this,'@state.done'));
      this._expr_3 = currVal_3;
    }
    this.debug(0,1,5);
    const currVal_2:any = this.context._transformOrigin;
    if (import7.checkBinding(throwOnChange,this._expr_2,currVal_2)) {
      this.renderer.setElementStyle(this._el_0,'transform-origin',((this.viewUtils.sanitizer.sanitize(import20.SecurityContext.STYLE,currVal_2) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import20.SecurityContext.STYLE,currVal_2).toString()));
      this._expr_2 = currVal_2;
    }
    this.debug(1,3,60);
    const currVal_4:any = import7.inlineInterpolate(1,'\n  ',this.context.message,'\n');
    if (import7.checkBinding(throwOnChange,this._expr_4,currVal_4)) {
      this.renderer.setText(this._text_1,currVal_4);
      this._expr_4 = currVal_4;
    }
  }
  detachInternal():void {
    var animationTransition_state:any = this.componentType.animations['state'](this,this._el_0,this._expr_3,'void');
    animationTransition_state.onStart(this.handleEvent_0.bind(this).bind(this,'@state.start'));
    animationTransition_state.onDone(this.handleEvent_0.bind(this).bind(this,'@state.done'));
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.debug(0,0,0);
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == '@state.done')) {
      const pd_sub_0:any = ((<any>this.context._afterVisibilityAnimation($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}